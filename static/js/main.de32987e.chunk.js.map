{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","props","state","showDetails","bool","this","setState","details","event","summary","location","description","link","date","start","dateTime","className","href","onClick","handleShowDetails","Component","EventList","events","map","id","CitySearch","handleInputChanged","value","target","suggestions","locations","filter","toUpperCase","indexOf","query","handleItemClicked","suggestion","showSuggestions","undefined","infoText","type","onChange","onFocus","style","display","NumberOfEvents","handleInputChange","number","eventListSize","errorText","updateListSize","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de32987e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Event extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showDetails: false,\r\n    };\r\n  }\r\n\r\n  handleShowDetails(bool) {\r\n    this.setState({\r\n      showDetails: bool,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { summary, location, description, link } = this.props.event;\r\n    const date = this.props.event.start.dateTime;\r\n\r\n    let details;\r\n    if (this.state.showDetails) {\r\n      details = (\r\n        <div className=\"expanded\">\r\n          {/* See details on Google Calendar */}\r\n\r\n          <h2>About event</h2>\r\n          <p className=\"description\">{description}</p>\r\n          <a className=\"link\" href={link}>\r\n            See event on Google Calendar\r\n          </a>\r\n          <button\r\n            className=\"detailsButton\"\r\n            onClick={() => this.handleShowDetails(false)}\r\n          >\r\n            Hide details\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      details = (\r\n        <button\r\n          className=\"detailsButton\"\r\n          onClick={() => this.handleShowDetails(true)}\r\n        >\r\n          Expand for Details\r\n        </button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"event\">\r\n        <h1 className=\"summary\">{summary}</h1>\r\n        <p className=\"date\">{date}</p>\r\n        <p className=\"location\">{location}</p>\r\n        {details}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Event;\r\n","import React, { Component } from \"react\";\r\nimport Event from \"./Event\";\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CitySearch extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      query: \"\",\r\n      suggestions: [],\r\n      showSuggestions: undefined,\r\n      infoText: \"\",\r\n    };\r\n  }\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n          onFocus={() => {\r\n            this.setState({ showSuggestions: true });\r\n          }}\r\n        />\r\n        <ul\r\n          className=\"suggestions\"\r\n          style={this.state.showSuggestions ? {} : { display: \"none\" }}\r\n        >\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => this.handleItemClicked(suggestion)}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          <li key=\"all\" onClick={() => this.handleItemClicked(\"all\")}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CitySearch;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NumberOfEvents extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      eventListSize: props.number,\r\n      errorText: \"\",\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const number = event.target.value;\r\n    if (number <= 0) {\r\n      this.setState({\r\n        eventListSize: number,\r\n        errorText: \"Please select a valid number.\",\r\n      });\r\n    } else {\r\n      this.setState({\r\n        eventListSize: number,\r\n        errorText: \"\",\r\n      });\r\n    }\r\n    this.props.updateListSize(number);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NumberOfEvents\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"number\"\r\n          placeholder=\"32\"\r\n          value={this.state.eventListSize}\r\n          onChange={this.handleInputChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport EventList from \"./EventList\";\r\nimport CitySearch from \"./CitySearch\";\r\nimport NumberOfEvents from \"./NumberOfEvents\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CitySearch />\r\n        <EventList />\r\n        <NumberOfEvents />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}